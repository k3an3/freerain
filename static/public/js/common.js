let ws=io.connect('//'+document.domain+':'+location.port);let filelist=$('#listing');let upload=$('#upload');$('#listing').on("click","li",e=>{fetch_manifest(e.target.id);});upload.on("drop",e=>{e.preventDefault();for(let x=0;x<e.originalEvent.dataTransfer.files.length;x++){let fr=new FileReader();let file=e.originalEvent.dataTransfer.files[x];fr.name=file.name;fr.addEventListener("loadend",()=>{ws.emit('upload',{file:fr.result,name:fr.name,count:3},record_file);});fr.readAsArrayBuffer(file);}
console.log("did a thing");});window.indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;window.requestFileSystem=window.requestFileSystem||window.webkitRequestFileSystem;window.requestFileSystem(window.PERSISTENT,10000000,onInitFs,errorHandler)
let request=window.indexedDB.open("storage",1);let db;let filesystem;let reverse_map={};function onInitFs(fs){console.log('Using FileSystemAPI: '+fs.name);filesystem=null;}
function errorHandler(e){var msg='';switch(e.code){case 10:msg='QUOTA_EXCEEDED_ERR';break;case 1:msg='NOT_FOUND_ERR';break;case 2:msg='SECURITY_ERR';break;case 9:msg='INVALID_MODIFICATION_ERR';break;case 7:msg='INVALID_STATE_ERR';break;default:msg='Unknown Error';break;};console.log('Error: '+msg);if(filesystem==null)
console.log('Falling back to IndexedDB.');}
request.onupgradeneeded=event=>{let tdb=event.target.result;tdb.createObjectStore("filestore",{keyPath:"hash"});let store=tdb.createObjectStore("mapping",{keyPath:"hash"});store.createIndex("name","name",{unique:false});};request.onsuccess=event=>{db=event.target.result;db.transaction("mapping").objectStore("mapping").openCursor().onsuccess=evt=>{let cursor=evt.target.result;if(cursor){console.log(cursor.value);filelist.append('<li class="file" id="'+cursor.value.hash+'">'+cursor.value.name+'</li>');cursor.continue();}}};function record_file(data){let os=db.transaction(["mapping"],"readwrite").objectStore("mapping");let request=os.add(data)
request.onsuccess=event=>{console.log(data);};}
function fetch_manifest(hash){db.transaction("mapping").objectStore("mapping").get(hash).onsuccess=event=>{let i=0;$.each(event.target.result.manifest,e=>{reverse_map[e]={hash:hash,order:i};ws.emit('fetch',{hash:e});i++;});};}
function save_file(data){if(filesystem!=null){filesystem.root.getFile(data['hash'],{create:true},fe=>{fe.createWriter(fileWriter=>{fileWriter.onwriteend=e=>{console.log('Write completed.');};fileWriter.onerror=e=>{console.log('Write failed: '+e.toString());};var blob=new Blob([data['data']],{type:'application/octet-binary'});fileWriter.write(blob);},errorHandler);},errorHandler);}else{let os=db.transaction(["filestore"],"readwrite").objectStore("filestore");let request=os.add(data);request.onsuccess=event=>{console.log(data);};}}
function read_file(data){let filedata=null;if(filesystem!=null){filesystem.root.getFile(data['hash'],{},fe=>{fe.file(file=>{var reader=new FileReader();reader.onloadend=e=>{filedata=this.result;};reader.readAsText(file);})},errorHandler);}else{db.transaction("filestore").objectStore("filestore").get(hash).onsuccess=event=>{data=event.target.result.value;};}
ws.emit('retrieval',{data:filedata,hash:data['hash'],sid:data['sid']});}
ws.on('distribute',save_file);ws.on('retrieve',read_file);